*neoscroll.txt*  Smooth scrolling

Author: Carles Rafols i Belles


===============================================================================
INTRODUCTION                                             *neoscroll-introduction*

The default mappings substitute most of the |scrolling| commands (see
|neoscroll-default-mappings| for details) to provide smooth window scrolling.
You can create your own scrolling commands using |neoscroll.scroll()|. You
can customize the scrolling behaviour and the scrolling stop rules by changing
the |neoscroll-options| as needed.


===============================================================================
FUNCTIONS                                                   *neoscroll-functions*

neoscroll.scroll(lines, move_cursor, time_step)              *neoscroll.scroll()*
    Scroll smoothly a number of lines or a fraction of the current window.
        `lines`:
            - If integer: number of lines to scroll.
            - If float: number of "windows" to scroll (e.g. 0.1 = 10% of the
              the current window's height.
            - A positive number scrolls downwards (mnemonic: increase line
              number). A negative number scrolls upwards (mnemonic: decrease
              line number).
         `move_cursor`: scroll and move the cursor simultaneously. When `true`
         scrolling downwards will stop when the cursor line is the last line
         of the file unless |g:neoscroll_stop_eof| is set to `true`.
         `time_step`: Time (in milliseconds) between one single line scroll
         and the next one.

Examples:
>
    " Scroll 10 lines upwards mimicking <C-d>
    lua require('neoscroll').scroll(-10, true, 8)
    " Scroll 'w:scroll' lines downwards (mimicking <C-u>
    lua require('neoscroll').scroll(vim.wo.scroll, true, 8)
    " Scroll 10% of the window height upwards
    lua require('neoscroll').scroll(0.1, true, 20)
<
===============================================================================
COMMANDS                                                     *neoscroll-commands*

|NeoscrollEnablePM| / |NeoscrollDisablePM|
    Enable/disable "Performance Mode" which disables Tree-sitter and regular
    syntax highlighting while scrolling. Particularly useful for large files,
    slow machines or heavy regex syntax highlighting.

===============================================================================
OPTIONS                                                       *neoscroll-options*

|g:neoscroll_no_mappings| (default: `false`)
    Do not define any mappings.

|g:neoscroll_hide_cursor| (default: `true`)
    If 'termguicolors' is set hide the cursor while scrolling.

|g:neoscroll_stop_eof| (default: `true`)
    When `move_cursor` is `true` scrolling downwards will stop when the bottom
    line of the window is the last line of the file.

|g.neoscroll_respect_scrolloff| (default: `false`)
    The cursor stops at the scrolloff margin. Try combining this option with
    either |g:neoscroll_stop_eof| or |g:neoscroll_cursor_scrolls_alone| (or
    both).

|g:neoscroll_cursor_scrolls_alone| (default: `true`)
    When scrolling upwards the cursor will keep on scrolling until it reaches
    the first line of the file even if the window cannot scroll further up.

===============================================================================
DEFAULT MAPPINGS                                     *neoscroll-default-mappings*

The following mappings are valid for normal, visual and select mode:

      Key     Function ~
     <C-u>    scroll(-vim.wo.scroll, true, 8)
     <C-d>    scroll( vim.wo.scroll, true, 8)
     <C-b>    scroll(-vim.api.nvim_win_get_height(0), true, 7)
     <C-f>    scroll( vim.api.nvim_win_get_height(0), true, 7)
     <C-y>    scroll(-0.10, true, 20)
     <C-e>    scroll( 0.10, true, 20)

===============================================================================
vim:tw=78:ts=4:et:ft=help:norl:
