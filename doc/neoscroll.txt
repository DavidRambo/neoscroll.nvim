*neoscroll.txt*  Smooth scrolling

Author: Carles Rafols i Belles


===============================================================================
INTRODUCTION                                             *neoscroll-introduction*

The default mappings substitute most of the |scrolling| commands (see
|neoscroll-default-mappings| for details) to provide smooth window scrolling.
You can create your own scrolling commands using |neoscroll.scroll()|. You
can customize the scrolling behaviour and the scrolling stop rules by changing
the |neoscroll-options| as needed.

===============================================================================
QUICKSTART                                                 *neoscroll-quickstart*

Add the `setup()` function in your init file:
>
    " In init.lua:
    require('neoscroll').setup()
    " In init.vim:
    lua require('neoscroll').setup()

===============================================================================
FUNCTIONS                                                   *neoscroll-functions*

neoscroll.setup({opts})                                       *neoscroll-setup()*
    Overwrites the default options with the options in the table `opts`,
    defines the default mappings and creates the necessary commands.

    Example with all the default options: >
        require('neoscroll').setup({
            mappings = {'<C-u>', '<C-d>', '<C-b>',
                '<C-f>', '<C-y>', '<C-e>', 'zt', 'zz', 'zb'},
            hide_cursor = true,          
            stop_eof = true,             
            respect_scrolloff = false,   
            cursor_scrolls_alone = true  
        })
<

neoscroll.scroll(lines, move_cursor, time_step)              *neoscroll.scroll()*
    Scroll smoothly a number of lines or a fraction of the current window.
        `lines`:
            - If integer: number of lines to scroll.
            - If float: number of "windows" to scroll (e.g. 0.1 = 10% of the
              current window's height.
            - A positive number scrolls downwards (mnemonic: increase line
              number). A negative number scrolls upwards (mnemonic: decrease
              line number).
         `move_cursor`: scroll and move the cursor simultaneously. When `true`
         scrolling downwards will stop when the cursor line is the last line
         of the file unless |stop_eof| is set to `true`.
         `time_step`: Time (in milliseconds) between one single line scroll
         and the next one.

You can also use the same function with different arguments to add an easing
function to the scrolling animation:

neoscroll.scroll(lines, move_cursor, easing, time_step1, time_step2)
    Scroll a number of lines or a fraction of the current window using an
    easing function to smooth the start and the end of the scrolling
    animation.
        `lines`:
            - If integer: number of lines to scroll.
            - If float: number of "windows" to scroll (e.g. 0.1 = 10% of the
              current window's height.
            - A positive number scrolls downwards (mnemonic: increase line
              number). A negative number scrolls upwards (mnemonic: decrease
              line number).
        `move_cursor`: scroll and move the cursor simultaneously. When `true`
        scrolling downwards will stop when the cursor line is the last line
        of the file unless |stop_eof| is set to `true`.
        `easing`: easing `function(x)` to use for the scrolling animation. It
        must take the relative scrolling position as an argument (a number
        between 0 to 1) and return the relative time-step (a number between 0
        and 1). For example:
            `function(x) return math.pow(x, 2) end`
        The relative time-step will then be mapped to the range [`time_step1`,
        `time_step2`] to obtain the time-step at any given point of the
        scrolling animation.
        `time_step1`: initial time-step in the scrolling animation
        `time_step2`: last time-step in the scrolling animation

Examples:
>
    " Scroll 10 lines upwards mimicking <C-d>
    lua require('neoscroll').scroll(-10, true, 8)
    " Scroll 'w:scroll' lines downwards (mimicking <C-u>
    lua require('neoscroll').scroll(vim.wo.scroll, true, 8)
    " Scroll 10% of the window height upwards
    lua require('neoscroll').scroll(0.1, true, 20)
    " Scroll 10 lines upwards using an easing function. The time-step will
    " transition from 5 to 20 miliseconds following the given easing function
    lua require('neoscroll').scroll(-10, true, function(x) return math.pow(x, 3) end, 5, 20)
<

neoscroll.{zt,zz,zb}(time_step)                            *neoscroll-zt-zz-zb*
    `scroll()` wrapper functions to mimic |zt|, |zz| and |zb| scrolling
    commands.

===============================================================================
COMMANDS                                                     *neoscroll-commands*

|NeoscrollEnablePM| / |NeoscrollDisablePM|
    Enable/disable "Performance Mode" which disables Tree-sitter and regular
    syntax highlighting while scrolling. Particularly useful for large files,
    slow machines or heavy regex syntax highlighting.

===============================================================================
OPTIONS                                                       *neoscroll-options*

|mappings| (default: `{'<C-u>', '<C-d>', '<C-b>', '<C-f>',`
                    `'<C-y>', '<C-e>', 'zt', 'zz', 'zb'}`)
    All the keys defined in this option will be mapped to their corresponding
    smooth-scroll function. To no map any key pass an empty table (`{}`)

|hide_cursor| (default: `true`)
    If 'termguicolors' is set hide the cursor while scrolling.

|stop_eof| (default: `true`)
    When `move_cursor` is `true` scrolling downwards will stop when the bottom
    line of the window is the last line of the file.

|respect_scrolloff| (default: `false`)
    The cursor stops at the scrolloff margin. Try combining this option with
    either |stop_eof| or |cursor_scrolls_alone| (or both).

|cursor_scrolls_alone| (default: `true`)
    The cursor will keep on scrolling even if the window cannot scroll
    further.

===============================================================================
DEFAULT MAPPINGS                                     *neoscroll-default-mappings*

The following mappings are valid for normal, visual and select mode:

      Key     Function ~
     <C-u>    scroll(-vim.wo.scroll, true, 8)
     <C-d>    scroll( vim.wo.scroll, true, 8)
     <C-b>    scroll(-vim.api.nvim_win_get_height(0), true, 7)
     <C-f>    scroll( vim.api.nvim_win_get_height(0), true, 7)
     <C-y>    scroll(-0.10, false, 20)
     <C-e>    scroll( 0.10, false, 20)
      zt      zt(7)
      zz      zz(7)
      zb      zb(7)

===============================================================================
vim:tw=78:ts=4:et:ft=help:norl:
